import { createHotContext as __vite__createHotContext } from "/@vite/client";import.meta.hot = __vite__createHotContext("/src/components/training/TrainingImporter.tsx");import __vite__cjsImport0_react_jsxDevRuntime from "/node_modules/.vite/deps/react_jsx-dev-runtime.js?v=2c4c02a3"; const jsxDEV = __vite__cjsImport0_react_jsxDevRuntime["jsxDEV"];
import * as RefreshRuntime from "/@react-refresh";
const inWebWorker = typeof WorkerGlobalScope !== "undefined" && self instanceof WorkerGlobalScope;
let prevRefreshReg;
let prevRefreshSig;
if (import.meta.hot && !inWebWorker) {
  if (!window.$RefreshReg$) {
    throw new Error(
      "@vitejs/plugin-react can't detect preamble. Something is wrong."
    );
  }
  prevRefreshReg = window.$RefreshReg$;
  prevRefreshSig = window.$RefreshSig$;
  window.$RefreshReg$ = RefreshRuntime.getRefreshReg("C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx");
  window.$RefreshSig$ = RefreshRuntime.createSignatureFunctionForTransform;
}
var _s = $RefreshSig$();
import __vite__cjsImport3_react from "/node_modules/.vite/deps/react.js?v=2c4c02a3"; const React = __vite__cjsImport3_react.__esModule ? __vite__cjsImport3_react.default : __vite__cjsImport3_react; const useState = __vite__cjsImport3_react["useState"];
import { X, Upload, Columns, Target, CheckCircle2, FileSpreadsheet } from "/node_modules/.vite/deps/lucide-react.js?v=2c4c02a3";
import { UploadStep } from "/src/components/training/UploadStep.tsx";
import { ColumnMapperStep } from "/src/components/training/ColumnMapperStep.tsx";
import { SmartMatchingStep } from "/src/components/training/SmartMatchingStep.tsx?t=1761862658651";
import { ReviewStep } from "/src/components/training/ReviewStep.tsx";
export function TrainingImporter({ onClose, onComplete, clientId }) {
  _s();
  const [step, setStep] = useState(1);
  const [csvData, setCsvData] = useState([]);
  const [headers, setHeaders] = useState([]);
  const [columnMapping, setColumnMapping] = useState(null);
  const [parsedRows, setParsedRows] = useState([]);
  const [trainingMatches, setTrainingMatches] = useState([]);
  const [workerMatches, setWorkerMatches] = useState([]);
  const [importing, setImporting] = useState(false);
  const steps = [
    { id: 1, name: "Upload", icon: Upload },
    { id: 2, name: "Map Columns", icon: Columns },
    { id: 3, name: "Match Controls", icon: Target },
    { id: 4, name: "Review & Import", icon: CheckCircle2 }
  ];
  const handleUploadComplete = (data, cols) => {
    setCsvData(data);
    setHeaders(cols);
    setStep(2);
  };
  const handleMappingComplete = (mapping, rows) => {
    setColumnMapping(mapping);
    setParsedRows(rows);
    setStep(3);
  };
  const handleMatchingComplete = (trainings, workers) => {
    setTrainingMatches(trainings);
    setWorkerMatches(workers);
    setStep(4);
  };
  const handleImport = async () => {
    setImporting(true);
    try {
      let imported = 0;
      let skipped = 0;
      const errors = [];
      const trainingMap = new Map(
        trainingMatches.filter((tm) => tm.controlId).map((tm) => [tm.trainingName, tm])
      );
      const workerMap = new Map(
        workerMatches.filter((wm) => wm.workerId).map((wm) => [wm.csvName, wm])
      );
      const recordsByControl = /* @__PURE__ */ new Map();
      for (const row of parsedRows) {
        try {
          const trainingMatch = trainingMap.get(row.trainingName);
          const workerMatch = workerMap.get(row.workerName);
          if (!trainingMatch || !workerMatch) {
            skipped++;
            continue;
          }
          const { controlId } = trainingMatch;
          const { workerId } = workerMatch;
          if (!controlId || !workerId) {
            skipped++;
            continue;
          }
          if (!recordsByControl.has(controlId)) {
            recordsByControl.set(controlId, []);
          }
          recordsByControl.get(controlId).push({
            workerId,
            issuedDate: row.issuedDate,
            expiryDate: row.expiryDate,
            notes: row.notes
          });
          imported++;
        } catch (err) {
          console.error("Failed to process row:", row, err);
          errors.push(`${row.workerName} - ${row.trainingName}: ${err.message}`);
          skipped++;
          imported--;
        }
      }
      for (const [controlId, records] of recordsByControl) {
        for (const record of records) {
          try {
            await window.api.bulkAddEvidence({
              controlId,
              workerIds: [record.workerId],
              issuedDate: record.issuedDate,
              expiryDate: record.expiryDate,
              notes: record.notes
            });
          } catch (err) {
            console.error("Bulk import failed:", err);
            errors.push(`Failed to import evidence for control ${controlId}`);
          }
        }
      }
      if (errors.length > 0) {
        console.warn("Import completed with errors:", errors);
        alert(`Import completed with ${errors.length} errors. Check console for details.`);
      }
      onComplete();
    } catch (error) {
      console.error("Import failed:", error);
      alert("Failed to import training records");
    } finally {
      setImporting(false);
    }
  };
  return /* @__PURE__ */ jsxDEV("div", { className: "fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4", children: /* @__PURE__ */ jsxDEV("div", { className: "bg-white rounded-lg shadow-xl max-w-5xl w-full max-h-[90vh] overflow-hidden flex flex-col", children: [
    /* @__PURE__ */ jsxDEV("div", { className: "bg-gradient-to-r from-blue-600 to-blue-700 px-6 py-4 flex items-center justify-between", children: [
      /* @__PURE__ */ jsxDEV("div", { className: "flex items-center space-x-3", children: [
        /* @__PURE__ */ jsxDEV(FileSpreadsheet, { className: "text-white", size: 28 }, void 0, false, {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 206,
          columnNumber: 13
        }, this),
        /* @__PURE__ */ jsxDEV("div", { children: [
          /* @__PURE__ */ jsxDEV("h2", { className: "text-xl font-bold text-white", children: "Training Records Import" }, void 0, false, {
            fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
            lineNumber: 208,
            columnNumber: 15
          }, this),
          /* @__PURE__ */ jsxDEV("p", { className: "text-blue-100 text-sm", children: "Import training data with smart matching" }, void 0, false, {
            fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
            lineNumber: 209,
            columnNumber: 15
          }, this)
        ] }, void 0, true, {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 207,
          columnNumber: 13
        }, this)
      ] }, void 0, true, {
        fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
        lineNumber: 205,
        columnNumber: 11
      }, this),
      /* @__PURE__ */ jsxDEV(
        "button",
        {
          onClick: onClose,
          className: "text-white hover:bg-blue-800 rounded-full p-2 transition-colors",
          disabled: importing,
          children: /* @__PURE__ */ jsxDEV(X, { size: 24 }, void 0, false, {
            fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
            lineNumber: 217,
            columnNumber: 13
          }, this)
        },
        void 0,
        false,
        {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 212,
          columnNumber: 11
        },
        this
      )
    ] }, void 0, true, {
      fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
      lineNumber: 204,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ jsxDEV("div", { className: "border-b border-gray-200 bg-gray-50 px-6 py-4", children: /* @__PURE__ */ jsxDEV("div", { className: "flex items-center justify-between", children: steps.map(
      (s, idx) => /* @__PURE__ */ jsxDEV(React.Fragment, { children: [
        /* @__PURE__ */ jsxDEV("div", { className: "flex items-center space-x-2", children: [
          /* @__PURE__ */ jsxDEV(
            "div",
            {
              className: `w-10 h-10 rounded-full flex items-center justify-center ${step >= s.id ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-400"}`,
              children: step > s.id ? /* @__PURE__ */ jsxDEV(CheckCircle2, { size: 20 }, void 0, false, {
                fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
                lineNumber: 235,
                columnNumber: 19
              }, this) : /* @__PURE__ */ jsxDEV(s.icon, { size: 20 }, void 0, false, {
                fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
                lineNumber: 237,
                columnNumber: 19
              }, this)
            },
            void 0,
            false,
            {
              fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
              lineNumber: 227,
              columnNumber: 19
            },
            this
          ),
          /* @__PURE__ */ jsxDEV(
            "span",
            {
              className: `text-sm font-medium ${step >= s.id ? "text-gray-900" : "text-gray-400"}`,
              children: s.name
            },
            void 0,
            false,
            {
              fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
              lineNumber: 240,
              columnNumber: 19
            },
            this
          )
        ] }, void 0, true, {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 226,
          columnNumber: 17
        }, this),
        idx < steps.length - 1 && /* @__PURE__ */ jsxDEV(
          "div",
          {
            className: `flex-1 h-1 mx-4 ${step > s.id ? "bg-blue-600" : "bg-gray-200"}`
          },
          void 0,
          false,
          {
            fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
            lineNumber: 249,
            columnNumber: 15
          },
          this
        )
      ] }, s.id, true, {
        fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
        lineNumber: 225,
        columnNumber: 13
      }, this)
    ) }, void 0, false, {
      fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
      lineNumber: 223,
      columnNumber: 11
    }, this) }, void 0, false, {
      fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
      lineNumber: 222,
      columnNumber: 9
    }, this),
    /* @__PURE__ */ jsxDEV("div", { className: "flex-1 overflow-y-auto p-6", children: [
      step === 1 && /* @__PURE__ */ jsxDEV(UploadStep, { onComplete: handleUploadComplete }, void 0, false, {
        fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
        lineNumber: 263,
        columnNumber: 11
      }, this),
      step === 2 && /* @__PURE__ */ jsxDEV(
        ColumnMapperStep,
        {
          headers,
          csvData,
          onComplete: handleMappingComplete,
          onBack: () => setStep(1)
        },
        void 0,
        false,
        {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 266,
          columnNumber: 11
        },
        this
      ),
      step === 3 && /* @__PURE__ */ jsxDEV(
        SmartMatchingStep,
        {
          parsedRows,
          clientId,
          onComplete: handleMatchingComplete,
          onBack: () => setStep(2)
        },
        void 0,
        false,
        {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 274,
          columnNumber: 11
        },
        this
      ),
      step === 4 && /* @__PURE__ */ jsxDEV(
        ReviewStep,
        {
          trainingMatches,
          workerMatches,
          parsedRows,
          onImport: handleImport,
          onBack: () => setStep(3),
          importing
        },
        void 0,
        false,
        {
          fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
          lineNumber: 282,
          columnNumber: 11
        },
        this
      )
    ] }, void 0, true, {
      fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
      lineNumber: 261,
      columnNumber: 9
    }, this)
  ] }, void 0, true, {
    fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
    lineNumber: 202,
    columnNumber: 7
  }, this) }, void 0, false, {
    fileName: "C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx",
    lineNumber: 201,
    columnNumber: 5
  }, this);
}
_s(TrainingImporter, "CRgkA2exWIHJOFIJ7/FFGSrMlJE=");
_c = TrainingImporter;
var _c;
$RefreshReg$(_c, "TrainingImporter");
if (import.meta.hot && !inWebWorker) {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
if (import.meta.hot && !inWebWorker) {
  RefreshRuntime.__hmr_import(import.meta.url).then((currentExports) => {
    RefreshRuntime.registerExportsForReactRefresh("C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx", currentExports);
    import.meta.hot.accept((nextExports) => {
      if (!nextExports) return;
      const invalidateMessage = RefreshRuntime.validateRefreshBoundaryAndEnqueueUpdate("C:/Users/Bill.S/safety-intelligence-engine/src/components/training/TrainingImporter.tsx", currentExports, nextExports);
      if (invalidateMessage) import.meta.hot.invalidate(invalidateMessage);
    });
  });
}

//# sourceMappingURL=data:application/json;base64,